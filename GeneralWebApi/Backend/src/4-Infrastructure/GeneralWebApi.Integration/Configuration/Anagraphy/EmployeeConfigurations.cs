using GeneralWebApi.Domain.Entities.Anagraphy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GeneralWebApi.Integration.Configuration.Anagraphy;

public class EmployeeConfigurations : IEntityTypeConfiguration<Employee>
{
       public void Configure(EntityTypeBuilder<Employee> builder)
       {
              builder.ToTable("Employees");

              // we don't need to generate the id, it will be generated by the base class

              //  #region Primary Key
              //  builder.HasKey(e => e.Id);
              //  builder.Property(e => e.Id).ValueGeneratedOnAdd();
              //  #endregion

              #region Properties Configuration
              // basic information
              builder.Property(e => e.FirstName).HasMaxLength(50).IsRequired();
              builder.Property(e => e.LastName).HasMaxLength(50).IsRequired();
              builder.Property(e => e.EmployeeNumber).HasMaxLength(20).IsRequired();
              builder.Property(e => e.TaxCode).HasMaxLength(16);

              // organizational structure relationship
              builder.Property(e => e.DepartmentId);
              builder.Property(e => e.PositionId);
              builder.Property(e => e.ManagerId);

              // work information
              builder.Property(e => e.HireDate).IsRequired();
              builder.Property(e => e.TerminationDate);

              // personal address
              builder.Property(e => e.Address).HasMaxLength(200);
              builder.Property(e => e.City).HasMaxLength(50);
              builder.Property(e => e.PostalCode).HasMaxLength(10);
              builder.Property(e => e.Country).HasMaxLength(50).HasDefaultValue("Italia");

              // emergency contact
              builder.Property(e => e.EmergencyContactName).HasMaxLength(100);
              builder.Property(e => e.EmergencyContactPhone).HasMaxLength(20);
              builder.Property(e => e.EmergencyContactRelation).HasMaxLength(50);




              // salary information
              builder.Property(e => e.CurrentSalary).HasColumnType("decimal(18,2)");
              builder.Property(e => e.SalaryCurrency).HasMaxLength(3).HasDefaultValue("EUR");
              builder.Property(e => e.LastSalaryIncreaseDate);
              builder.Property(e => e.NextSalaryIncreaseDate);

              // work status
              builder.Property(e => e.EmploymentStatus).HasMaxLength(20).HasDefaultValue("Active");
              builder.Property(e => e.EmploymentType).HasMaxLength(20).HasDefaultValue("FullTime");
              builder.Property(e => e.WorkingHoursPerWeek);
              #endregion

              #region Foreign Key Relationships
              // department relationship
              builder.HasOne(e => e.Department)
                     .WithMany(d => d.Employees)
                     .HasForeignKey(e => e.DepartmentId)
                     .OnDelete(DeleteBehavior.SetNull);

              // position relationship
              builder.HasOne(e => e.Position)
                     .WithMany(p => p.Employees)
                     .HasForeignKey(e => e.PositionId)
                     .OnDelete(DeleteBehavior.SetNull);

              // manager relationship - 自引用必须用 NoAction
              builder.HasOne(e => e.Manager)
                     .WithMany(e => e.Subordinates)
                     .HasForeignKey(e => e.ManagerId)
                     .OnDelete(DeleteBehavior.NoAction);
              #endregion

              #region Indexes
              builder.HasIndex(e => e.EmployeeNumber).IsUnique();
              builder.HasIndex(e => e.DepartmentId);
              builder.HasIndex(e => e.PositionId);
              builder.HasIndex(e => e.ManagerId);
              builder.HasIndex(e => e.TaxCode).IsUnique();
              builder.HasIndex(e => e.EmploymentStatus);
              builder.HasIndex(e => e.HireDate);
              #endregion
       }
}